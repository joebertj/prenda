package com.prenda.model.obj;

import com.prenda.model.obj.iface.IInterest;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: interest.
 * @author autogenerated
 */

@Entity
@Table(name = "interest", catalog = "prenda")
public class Interest implements Cloneable, Serializable, IInterest {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559018157L;

	
	
	/** Field mapping. */
	private Byte rate;
 
	private InterestPK interestPK;
	
	

	@Id
	public InterestPK getInterestPK() {
		return interestPK;
	}

	public void setInterestPK(InterestPK interestPK) {
		this.interestPK = interestPK;
	}

	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Interest.class;
	}
 

    
	

  
    

    /**
     * Return the value associated with the column: rate.
	 * @return A Byte object (this.rate)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Byte getRate() {
		return this.rate;
		
	}
	

  
    /**  
     * Set the value related to the column: rate.
	 * @param rate the rate value you wish to set
	 */
	public void setRate(final Byte rate) {
		this.rate = rate;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Interest clone() throws CloneNotSupportedException {
		
        final Interest copy = (Interest)super.clone();
        
        copy.setInterestPK(interestPK);
		copy.setRate(this.getRate());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("day: " + interestPK.getDay() + ", ");
		sb.append("interestid: " + interestPK.getInterestid() + ", ");
		sb.append("rate: " + this.getRate());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Interest that; 
		try {
			that = (Interest) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getInterestPK().getDay() == null) && (that.getInterestPK().getDay() == null)) || (getInterestPK().getDay() != null && getInterestPK().getDay().equals(that.getInterestPK().getDay())));
		result = result && (((getInterestPK().getInterestid() == null) && (that.getInterestPK().getInterestid() == null)) || (getInterestPK().getInterestid() != null && getInterestPK().getInterestid().equals(that.getInterestPK().getInterestid())));
		result = result && (((getRate() == null) && (that.getRate() == null)) || (getRate() != null && getRate().equals(that.getRate())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		return getInterestPK().hashCode();
	}

	
}
