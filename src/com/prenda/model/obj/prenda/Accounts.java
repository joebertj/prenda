package com.prenda.model.obj.prenda;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;
import com.prenda.model.obj.prenda.iface.IAccounts;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: accounts.
 * @author autogenerated
 */

@Entity
@Table(name = "accounts", catalog = "prenda")
public class Accounts implements Cloneable, Serializable, IPojoGenEntity, IAccounts {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559018160L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Byte> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Byte>());
	
	/** hashCode temporary storage. */
	private volatile Byte hashCode;
	

	/** Field mapping. */
	private Integer accountcode;
	/** Field mapping. */
	private String accountname;
	/** Field mapping. */
	private Byte id;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Accounts() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Accounts(Byte id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param accountname String object;
	 * @param id Byte object;
	 */
	public Accounts(String accountname, Byte id) {

		this.accountname = accountname;
		this.id = id;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Accounts.class;
	}
 

    /**
     * Return the value associated with the column: accountcode.
	 * @return A Integer object (this.accountcode)
	 */
	public Integer getAccountcode() {
		return this.accountcode;
		
	}
	

  
    /**  
     * Set the value related to the column: accountcode.
	 * @param accountcode the accountcode value you wish to set
	 */
	public void setAccountcode(final Integer accountcode) {
		this.accountcode = accountcode;
	}

    /**
     * Return the value associated with the column: accountname.
	 * @return A String object (this.accountname)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 30  )
	public String getAccountname() {
		return this.accountname;
		
	}
	

  
    /**  
     * Set the value related to the column: accountname.
	 * @param accountname the accountname value you wish to set
	 */
	public void setAccountname(final String accountname) {
		this.accountname = accountname;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Byte object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "accountid", nullable = false  )
	public Byte getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Byte id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Accounts clone() throws CloneNotSupportedException {
		
        final Accounts copy = (Accounts)super.clone();

		copy.setAccountcode(this.getAccountcode());
		copy.setAccountname(this.getAccountname());
		copy.setId(this.getId());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("accountcode: " + this.getAccountcode() + ", ");
		sb.append("accountname: " + this.getAccountname() + ", ");
		sb.append("id: " + this.getId());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Accounts that; 
		try {
			that = (Accounts) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAccountcode() == null) && (that.getAccountcode() == null)) || (getAccountcode() != null && getAccountcode().equals(that.getAccountcode())));
		result = result && (((getAccountname() == null) && (that.getAccountname() == null)) || (getAccountname() != null && getAccountname().equals(that.getAccountname())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Byte newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
							newHashCode = (byte)super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
