package com.prenda.model.obj.prenda;

import com.prenda.model.obj.prenda.iface.IInterestPK;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;


/** 
 * Object mapping for hibernate-handled table: interest.
 * @author autogenerated
 */

@Embeddable
public class InterestPK implements Cloneable, Serializable,  IInterestPK {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559018154L;

	

	/** Field mapping. */
	@Column( nullable = false  )
	private Byte day;

	/** Field mapping. */
	@Column( nullable = false  )
	private Integer interestid;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return InterestPK.class;
	}
 

    /**
     * Return the value associated with the column: day.
	 * @return A Byte object (this.day)
	 */
	public Byte getDay() {
		return this.day;
		
	}
	

  
    /**  
     * Set the value related to the column: day.
	 * @param day the day value you wish to set
	 */
	public void setDay(final Byte day) {
		this.day = day;
	}

    /**
     * Return the value associated with the column: interestid.
	 * @return A Integer object (this.interestid)
	 */
	public Integer getInterestid() {
		return this.interestid;
		
	}
	

  
    /**  
     * Set the value related to the column: interestid.
	 * @param interestid the interestid value you wish to set
	 */
	public void setInterestid(final Integer interestid) {
		this.interestid = interestid;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public InterestPK clone() throws CloneNotSupportedException {
		
        final InterestPK copy = (InterestPK)super.clone();

		copy.setDay(this.getDay());
		copy.setInterestid(this.getInterestid());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("day: " + this.getDay() + ", ");
		sb.append("interestid: " + this.getInterestid());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final InterestPK that; 
		try {
			that = (InterestPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getDay() == null) && (that.getDay() == null)) || (getDay() != null && getDay().equals(that.getDay())));
		result = result && (((getInterestid() == null) && (that.getInterestid() == null)) || (getInterestid() != null && getInterestid().equals(that.getInterestid())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getDay().hashCode();
		hash = hash + getInterestid().hashCode();
	return hash;
	}
	

	
}
