<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-3.2.xsd
              http://www.springframework.org/schema/jee
              http://www.springframework.org/schema/jee/spring-jee-3.2.xsd

              http://www.springframework.org/schema/jms

              http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
              http://www.springframework.org/schema/lang
              http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
              http://www.springframework.org/schema/util
              http://www.springframework.org/schema/util/spring-utils-3.2.xsd">

   	<bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
	<context:annotation-config />
    <context:component-scan base-package="com.prenda" />
    <context:component-scan base-package="com.github.wwadge.hbnpojogen.persistence.impl.HibernateUtils" />

	<bean
		class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
		<property name="location">
			<value>classpath:application.properties</value>
		</property>
	</bean>




	<bean id="mainDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- access -->
		<property name="driverClass" value="${mainDataSource.driverClass}" />
		<property name="jdbcUrl" value="${mainDataSource.jdbcUrl}" />
		<property name="user" value="${mainDataSource.user}" />
		<property name="password" value="${mainDataSource.password}" />
		<!-- pool sizing -->
		<property name="initialPoolSize" value="3" />
		<property name="minPoolSize" value="6" />
		<property name="maxPoolSize" value="25" />
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="0" />
		<!-- retries -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" /> <!-- 1s -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- refreshing connections -->
		<property name="maxIdleTime" value="180" /> <!-- 3min -->
		<property name="maxConnectionAge" value="10" /> <!-- 1h -->
		<!-- timeouts and testing -->
		<property name="checkoutTimeout" value="5000" /> <!-- 5s -->
		<property name="idleConnectionTestPeriod" value="60" /> <!-- 60 -->
		<property name="testConnectionOnCheckout" value="true" />
		<property name="preferredTestQuery" value="SELECT 1" />
		<property name="testConnectionOnCheckin" value="true" />
	</bean>
	<!-- Obtain a datasource connection via JNDI. This section will go if we 
		make the transition to jndi (just repeated here to make it easier for others 
		to change without flipping over to synchronizer again. <bean id="mainDataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" 
		value="jdbc/prenda" /> <property name="resourceRef" value="true" /> </bean> -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref local="mainDataSource" />
		</property>
	</bean>
	
    <!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	
		
 		<property name="packagesToScan">
			<list>
				<value>com.prenda.**.*</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
			</props>
		</property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	



	<!-- Add your pointcuts to provide transactions/session management here. 
		Alternately, use the @Transaction annotation in your service layer -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="*" read-only="false"/> </tx:attributes> 
		</tx:advice> <aop:config> <aop:pointcut id="testOperation" expression="execution(* 
		com.prenda.*(..))"/> <aop:advisor advice-ref="txAdvice" pointcut-ref="testOperation"/> 
		</aop:config> -->

</beans>
